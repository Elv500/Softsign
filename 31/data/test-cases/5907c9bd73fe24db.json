{"uid":"5907c9bd73fe24db","name":"test_TC274_actualizar_grupo_sin_campo_name","fullName":"tests.customer.groups.test_HU03_PD_PUT_CustomerGroup#test_TC274_actualizar_grupo_sin_campo_name","historyId":"67a9cc8997aa3147c77d23a0dfffb88b","time":{"start":1755294204482,"stop":1755294204831,"duration":349},"status":"skipped","statusMessage":"XFAIL Permite actualizar el campo name vacio cuando es obligatorio\n\nAssertionError","statusTrace":"setup_customer_group_cleanup = ({'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NTUyOTQwOTgsImV4cCI6MTc1NTI5NzY5OCwicm9sZX...MgJ0DxsBgBhaoS7Ssd51Ly4YN4'}, <function setup_customer_group_cleanup.<locals>.add_group_for_cleanup at 0x7f24083d2fc0>)\n\n    @pytest.mark.negative\n    @pytest.mark.boundary\n    @pytest.mark.regression\n    @pytest.mark.xfail(reason=\"Permite actualizar el campo name vacio cuando es obligatorio\", run=True)\n    def test_TC274_actualizar_grupo_sin_campo_name(setup_customer_group_cleanup):\n        auth_headers, add_group_for_cleanup = setup_customer_group_cleanup\n    \n        initial_data = generate_customer_group_source_data()\n        create_endpoint = EndpointCustomerGroup.customer_group()\n        create_response = SyliusRequest.post(create_endpoint, auth_headers, initial_data)\n        AssertionStatusCode.assert_status_code_201(create_response)\n    \n        customer_group_code = create_response.json()[\"code\"]\n        add_group_for_cleanup(customer_group_code)\n    \n        data = {}\n        endpoint = EndpointCustomerGroup.code(customer_group_code)\n        response = SyliusRequest.put(endpoint, auth_headers, data)\n    \n        log_request_response(endpoint, response, headers=auth_headers, payload=data)\n>       AssertionStatusCode.assert_status_code_422(response)\n\ntests/customer/groups/test_HU03_PD_PUT_CustomerGroup.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>\n\n    @staticmethod\n    def assert_status_code_422(response):\n>       assert response.status_code == 422\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError\n\nsrc/assertions/status_code_assertions.py:59: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1755294098314,"stop":1755294098315,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"auth_headers","time":{"start":1755294098315,"stop":1755294098830,"duration":515},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_customer_group_cleanup","time":{"start":1755294204482,"stop":1755294204482,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL Permite actualizar el campo name vacio cuando es obligatorio\n\nAssertionError","statusTrace":"setup_customer_group_cleanup = ({'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NTUyOTQwOTgsImV4cCI6MTc1NTI5NzY5OCwicm9sZX...MgJ0DxsBgBhaoS7Ssd51Ly4YN4'}, <function setup_customer_group_cleanup.<locals>.add_group_for_cleanup at 0x7f24083d2fc0>)\n\n    @pytest.mark.negative\n    @pytest.mark.boundary\n    @pytest.mark.regression\n    @pytest.mark.xfail(reason=\"Permite actualizar el campo name vacio cuando es obligatorio\", run=True)\n    def test_TC274_actualizar_grupo_sin_campo_name(setup_customer_group_cleanup):\n        auth_headers, add_group_for_cleanup = setup_customer_group_cleanup\n    \n        initial_data = generate_customer_group_source_data()\n        create_endpoint = EndpointCustomerGroup.customer_group()\n        create_response = SyliusRequest.post(create_endpoint, auth_headers, initial_data)\n        AssertionStatusCode.assert_status_code_201(create_response)\n    \n        customer_group_code = create_response.json()[\"code\"]\n        add_group_for_cleanup(customer_group_code)\n    \n        data = {}\n        endpoint = EndpointCustomerGroup.code(customer_group_code)\n        response = SyliusRequest.put(endpoint, auth_headers, data)\n    \n        log_request_response(endpoint, response, headers=auth_headers, payload=data)\n>       AssertionStatusCode.assert_status_code_422(response)\n\ntests/customer/groups/test_HU03_PD_PUT_CustomerGroup.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>\n\n    @staticmethod\n    def assert_status_code_422(response):\n>       assert response.status_code == 422\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError\n\nsrc/assertions/status_code_assertions.py:59: AssertionError","steps":[],"attachments":[{"uid":"74c8aa419dc317fb","name":"log","source":"74c8aa419dc317fb.txt","type":"text/plain","size":2109},{"uid":"e9c0e8d2e56a84c7","name":"stdout","source":"e9c0e8d2e56a84c7.txt","type":"text/plain","size":47}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup_customer_group_cleanup::0","time":{"start":1755294204841,"stop":1755294204995,"duration":154},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"regression"},{"name":"tag","value":"boundary"},{"name":"tag","value":"negative"},{"name":"parentSuite","value":"tests.customer.groups"},{"name":"suite","value":"test_HU03_PD_PUT_CustomerGroup"},{"name":"host","value":"pkrvmubgrv54qmi"},{"name":"thread","value":"2377-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.customer.groups.test_HU03_PD_PUT_CustomerGroup"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":5,"passed":0,"unknown":0,"total":5},"items":[{"uid":"dc59295081b5cbe3","reportUrl":"https://Elv500.github.io/Softsign/30//#testresult/dc59295081b5cbe3","status":"skipped","statusDetails":"XFAIL Permite actualizar el campo name vacio cuando es obligatorio\n\nAssertionError","time":{"start":1755291895149,"stop":1755291895517,"duration":368}},{"uid":"26af9305951220d1","reportUrl":"https://Elv500.github.io/Softsign/29//#testresult/26af9305951220d1","status":"skipped","statusDetails":"XFAIL Permite actualizar el campo name vacio cuando es obligatorio\n\nAssertionError","time":{"start":1755291554747,"stop":1755291555090,"duration":343}},{"uid":"9e30db11b8823a16","reportUrl":"https://Elv500.github.io/Softsign/28//#testresult/9e30db11b8823a16","status":"skipped","statusDetails":"XFAIL Permite actualizar el campo name vacio cuando es obligatorio\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 3 column 1 (char 2)","time":{"start":1755291278143,"stop":1755291278143,"duration":0}},{"uid":"9e325b8b4d5bc049","reportUrl":"https://Elv500.github.io/Softsign/27//#testresult/9e325b8b4d5bc049","status":"skipped","statusDetails":"XFAIL Permite actualizar el campo name vacio cuando es obligatorio\n\nAssertionError","time":{"start":1755149184140,"stop":1755149184603,"duration":463}}]},"tags":["boundary","negative","regression"]},"source":"5907c9bd73fe24db.json","parameterValues":[]}