{"uid":"dd7cd6725dd084c3","name":"test_TC363_338_No_permitir_campos_vacios[invalid_payload4-solo dato invalido.-400]","fullName":"tests.configuration.tax_categories.test_HU29_KG_PUT_TaxCategory#test_TC363_338_No_permitir_campos_vacios","historyId":"05d0d7c35b689a1b87c9435fda922517","time":{"start":1755294186411,"stop":1755294186723,"duration":312},"status":"skipped","statusMessage":"XFAIL known issue La app permite espacios vacios y campos invalidos BUG\n\nAssertionError: Esperado status 400, obtenido 422\nassert 422 == 400\n +  where 422 = <Response [422]>.status_code","statusTrace":"setup_edit_tax_category = ({'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NTUyOTQwOTgsImV4cCI6MTc1NTI5NzY5OCwicm9sZX...xts/TaxCategory', '@id': '/api/v2/admin/tax-categories/TAX-0db4ae', '@type': 'TaxCategory', 'code': 'TAX-0db4ae', ...})\ninvalid_payload = {'name': '+'}, expected_error = 'solo dato invalido.'\nexpected_status = 400\n\n    @pytest.mark.regression\n    @pytest.mark.negative\n    @pytest.mark.xfail(reason=\"known issue La app permite espacios vacios y campos invalidos BUG\", run=True)\n    @pytest.mark.parametrize(\"invalid_payload,expected_error,expected_status\", [\n        ({\"name\": \"\"}, \"Please enter tax category name.\", 422),\n        ({\"name\": \"   \"}, None, 422), #en este caso deberia de fallar pero manda como bien con 200\n        ({\"name\": None}, \"The type of the \\\"name\\\" attribute must be \\\"string\\\"\", 400),\n        ({\"name\": \"Válido\", \"description\": \"\"}, None, 200),\n        ({\"name\": \"+\"}, \"solo dato invalido.\", 400) #no ingresar con semantica incorrecta\n    ])\n    def test_TC363_338_No_permitir_campos_vacios(setup_edit_tax_category, invalid_payload, expected_error, expected_status):\n        headers, tax_category_data = setup_edit_tax_category\n        url = EndpointTaxCategory.code(tax_category_data[\"code\"])\n        initial_response = SyliusRequest.get(url, headers)\n        initial_data = initial_response.json()\n        log_request_response(url, initial_response, headers)\n        response = SyliusRequest.put(url, headers, invalid_payload)\n        log_request_response(url, response, headers, invalid_payload)\n>       assert response.status_code == expected_status, f\"Esperado status {expected_status}, obtenido {response.status_code}\"\nE       AssertionError: Esperado status 400, obtenido 422\nE       assert 422 == 400\nE        +  where 422 = <Response [422]>.status_code\n\ntests/configuration/tax_categories/test_HU29_KG_PUT_TaxCategory.py:78: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1755294098314,"stop":1755294098315,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"auth_headers","time":{"start":1755294098315,"stop":1755294098830,"duration":515},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_edit_tax_category","time":{"start":1755294186247,"stop":1755294186410,"duration":163},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL known issue La app permite espacios vacios y campos invalidos BUG\n\nAssertionError: Esperado status 400, obtenido 422\nassert 422 == 400\n +  where 422 = <Response [422]>.status_code","statusTrace":"setup_edit_tax_category = ({'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NTUyOTQwOTgsImV4cCI6MTc1NTI5NzY5OCwicm9sZX...xts/TaxCategory', '@id': '/api/v2/admin/tax-categories/TAX-0db4ae', '@type': 'TaxCategory', 'code': 'TAX-0db4ae', ...})\ninvalid_payload = {'name': '+'}, expected_error = 'solo dato invalido.'\nexpected_status = 400\n\n    @pytest.mark.regression\n    @pytest.mark.negative\n    @pytest.mark.xfail(reason=\"known issue La app permite espacios vacios y campos invalidos BUG\", run=True)\n    @pytest.mark.parametrize(\"invalid_payload,expected_error,expected_status\", [\n        ({\"name\": \"\"}, \"Please enter tax category name.\", 422),\n        ({\"name\": \"   \"}, None, 422), #en este caso deberia de fallar pero manda como bien con 200\n        ({\"name\": None}, \"The type of the \\\"name\\\" attribute must be \\\"string\\\"\", 400),\n        ({\"name\": \"Válido\", \"description\": \"\"}, None, 200),\n        ({\"name\": \"+\"}, \"solo dato invalido.\", 400) #no ingresar con semantica incorrecta\n    ])\n    def test_TC363_338_No_permitir_campos_vacios(setup_edit_tax_category, invalid_payload, expected_error, expected_status):\n        headers, tax_category_data = setup_edit_tax_category\n        url = EndpointTaxCategory.code(tax_category_data[\"code\"])\n        initial_response = SyliusRequest.get(url, headers)\n        initial_data = initial_response.json()\n        log_request_response(url, initial_response, headers)\n        response = SyliusRequest.put(url, headers, invalid_payload)\n        log_request_response(url, response, headers, invalid_payload)\n>       assert response.status_code == expected_status, f\"Esperado status {expected_status}, obtenido {response.status_code}\"\nE       AssertionError: Esperado status 400, obtenido 422\nE       assert 422 == 400\nE        +  where 422 = <Response [422]>.status_code\n\ntests/configuration/tax_categories/test_HU29_KG_PUT_TaxCategory.py:78: AssertionError","steps":[],"attachments":[{"uid":"81310df673a0a793","name":"log","source":"81310df673a0a793.txt","type":"text/plain","size":4455}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"setup_edit_tax_category::0","time":{"start":1755294186730,"stop":1755294186885,"duration":155},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"negative"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.configuration.tax_categories"},{"name":"suite","value":"test_HU29_KG_PUT_TaxCategory"},{"name":"host","value":"pkrvmubgrv54qmi"},{"name":"thread","value":"2377-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.configuration.tax_categories.test_HU29_KG_PUT_TaxCategory"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_error","value":"'solo dato invalido.'"},{"name":"expected_status","value":"400"},{"name":"invalid_payload","value":"{'name': '+'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":5,"passed":0,"unknown":0,"total":5},"items":[{"uid":"85d850bfce20ebaa","reportUrl":"https://Elv500.github.io/Softsign/30//#testresult/85d850bfce20ebaa","status":"skipped","statusDetails":"XFAIL known issue La app permite espacios vacios y campos invalidos BUG\n\nAssertionError: Esperado status 400, obtenido 422\nassert 422 == 400\n +  where 422 = <Response [422]>.status_code","time":{"start":1755291876748,"stop":1755291877067,"duration":319}},{"uid":"11d9e3660a40865","reportUrl":"https://Elv500.github.io/Softsign/29//#testresult/11d9e3660a40865","status":"skipped","statusDetails":"XFAIL known issue La app permite espacios vacios y campos invalidos BUG\n\nAssertionError: Esperado status 400, obtenido 422\nassert 422 == 400\n +  where 422 = <Response [422]>.status_code","time":{"start":1755291536021,"stop":1755291536580,"duration":559}},{"uid":"8f14e71c3ecb6e43","reportUrl":"https://Elv500.github.io/Softsign/28//#testresult/8f14e71c3ecb6e43","status":"skipped","statusDetails":"XFAIL known issue La app permite espacios vacios y campos invalidos BUG\n\nrequests.exceptions.JSONDecodeError: Expecting value: line 3 column 1 (char 2)","time":{"start":1755291274747,"stop":1755291274747,"duration":0}},{"uid":"30bcabfac0e584e4","reportUrl":"https://Elv500.github.io/Softsign/27//#testresult/30bcabfac0e584e4","status":"skipped","statusDetails":"XFAIL known issue La app permite espacios vacios BUG\n\nAssertionError: Esperado status 400, obtenido 422\nassert 422 == 400\n +  where 422 = <Response [422]>.status_code","time":{"start":1755149158293,"stop":1755149158768,"duration":475}}]},"tags":["negative","regression"]},"source":"dd7cd6725dd084c3.json","parameterValues":["'solo dato invalido.'","400","{'name': '+'}"]}