{"uid":"94c0d0ed9182fb53","name":"test_TC178_obtener_grupo_por_codigo_existente","fullName":"tests.customer.groups.test_HU01_PD_GET_Customer_Group#test_TC178_obtener_grupo_por_codigo_existente","historyId":"a276f6967c0680f86f5b258cf0beb750","time":{"start":1755553209646,"stop":1755553209863,"duration":217},"status":"failed","statusMessage":"AssertionError","statusTrace":"auth_headers = {'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NTU1NTMwNzksImV4cCI6MTc1NTU1NjY3OSwicm9sZXM...oslHbToKSC6ZAgjaSa0SOxpHDRKC9ujG3HPDKlSIM7zZ_sLwxJ0BPoGZyCvUWsBUBGo0Gi7IDTuZ01U6uEASctJHzZ-iKxD_UeVYccQGSHfTd1_xQ6riU'}\n\n    @pytest.mark.functional\n    @pytest.mark.smoke\n    @pytest.mark.high\n    def test_TC178_obtener_grupo_por_codigo_existente(auth_headers):\n        group_code = \"retail\"\n    \n        endpoint = EndpointCustomerGroup.code(group_code)\n        response = SyliusRequest.get(endpoint, auth_headers)\n    \n        log_request_response(endpoint, response, headers=auth_headers)\n    \n>       AssertionStatusCode.assert_status_code_200(response)\n\ntests/customer/groups/test_HU01_PD_GET_Customer_Group.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [404]>\n\n    @staticmethod\n    def assert_status_code_200(response):\n>       assert response.status_code == 200\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError\n\nsrc/assertions/status_code_assertions.py:11: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1755553079177,"stop":1755553079178,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"auth_headers","time":{"start":1755553079178,"stop":1755553079831,"duration":653},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"auth_headers = {'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NTU1NTMwNzksImV4cCI6MTc1NTU1NjY3OSwicm9sZXM...oslHbToKSC6ZAgjaSa0SOxpHDRKC9ujG3HPDKlSIM7zZ_sLwxJ0BPoGZyCvUWsBUBGo0Gi7IDTuZ01U6uEASctJHzZ-iKxD_UeVYccQGSHfTd1_xQ6riU'}\n\n    @pytest.mark.functional\n    @pytest.mark.smoke\n    @pytest.mark.high\n    def test_TC178_obtener_grupo_por_codigo_existente(auth_headers):\n        group_code = \"retail\"\n    \n        endpoint = EndpointCustomerGroup.code(group_code)\n        response = SyliusRequest.get(endpoint, auth_headers)\n    \n        log_request_response(endpoint, response, headers=auth_headers)\n    \n>       AssertionStatusCode.assert_status_code_200(response)\n\ntests/customer/groups/test_HU01_PD_GET_Customer_Group.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [404]>\n\n    @staticmethod\n    def assert_status_code_200(response):\n>       assert response.status_code == 200\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError\n\nsrc/assertions/status_code_assertions.py:11: AssertionError","steps":[],"attachments":[{"uid":"e0ae3361ee9ce5d7","name":"log","source":"e0ae3361ee9ce5d7.txt","type":"text/plain","size":1731}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"high"},{"name":"tag","value":"smoke"},{"name":"tag","value":"functional"},{"name":"parentSuite","value":"tests.customer.groups"},{"name":"suite","value":"test_HU01_PD_GET_Customer_Group"},{"name":"host","value":"pkrvmubgrv54qmi"},{"name":"thread","value":"2452-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.customer.groups.test_HU01_PD_GET_Customer_Group"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":7,"unknown":0,"total":9},"items":[{"uid":"a5cdad540983728a","reportUrl":"https://Elv500.github.io/Softsign/93//#testresult/a5cdad540983728a","status":"failed","statusDetails":"AssertionError","time":{"start":1755552807636,"stop":1755552807777,"duration":141}},{"uid":"42e5c48d2bce524","reportUrl":"https://Elv500.github.io/Softsign/92//#testresult/42e5c48d2bce524","status":"passed","time":{"start":1755552546156,"stop":1755552546609,"duration":453}},{"uid":"58dd2ee641268d07","reportUrl":"https://Elv500.github.io/Softsign/65//#testresult/58dd2ee641268d07","status":"passed","time":{"start":1755545868194,"stop":1755545868512,"duration":318}},{"uid":"5444c2147b959673","reportUrl":"https://Elv500.github.io/Softsign/62//#testresult/5444c2147b959673","status":"passed","time":{"start":1755545545493,"stop":1755545545834,"duration":341}},{"uid":"bdcc0a9bc3754278","reportUrl":"https://Elv500.github.io/Softsign/61//#testresult/bdcc0a9bc3754278","status":"passed","time":{"start":1755545386294,"stop":1755545386876,"duration":582}},{"uid":"40afcc9579a00a28","reportUrl":"https://Elv500.github.io/Softsign/60//#testresult/40afcc9579a00a28","status":"passed","time":{"start":1755545325265,"stop":1755545325769,"duration":504}},{"uid":"ddaab9d59d35111f","reportUrl":"https://Elv500.github.io/Softsign/59//#testresult/ddaab9d59d35111f","status":"passed","time":{"start":1755545159412,"stop":1755545159848,"duration":436}},{"uid":"a98f3181259a2473","reportUrl":"https://Elv500.github.io/Softsign/57//#testresult/a98f3181259a2473","status":"passed","time":{"start":1755544369858,"stop":1755544370321,"duration":463}}]},"tags":["high","functional","smoke"]},"source":"94c0d0ed9182fb53.json","parameterValues":[]}