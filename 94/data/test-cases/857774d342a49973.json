{"uid":"857774d342a49973","name":"test_TC181_validar_paginacion_basica","fullName":"tests.customer.groups.test_HU01_PD_GET_Customer_Group#test_TC181_validar_paginacion_basica","historyId":"0266885f0fe4f5feb8dfb9af0b919f4e","time":{"start":1755553210340,"stop":1755553210573,"duration":233},"status":"failed","statusMessage":"Failed: Error en paginación de Customer Group: No coincide la cantidad de elementos solicitada","statusTrace":"response_json = {'@context': '/api/v2/contexts/CustomerGroup', '@id': '/api/v2/admin/customer-groups', '@type': 'hydra:Collection', 'h...id': '/api/v2/admin/customer-groups/wholesale', '@type': 'CustomerGroup', 'code': 'wholesale', 'id': 11790, ...}], ...}\nparams = {'itemsPerPage': 2, 'page': 1}\n\n    @staticmethod\n    def assert_customer_group_pagination(response_json, params):\n        \"\"\"Valida que la paginación coincida con los parámetros enviados\"\"\"\n        try:\n            expected_count = params.get(\"itemsPerPage\")\n            page = params.get(\"page\", 1)\n            if expected_count is not None:\n>               assert len(response_json[\"hydra:member\"]) == expected_count, \\\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                    \"No coincide la cantidad de elementos solicitada\"\nE                   AssertionError: No coincide la cantidad de elementos solicitada\n\nsrc/assertions/customergroup_assertions/customer_group_get_content_assertions.py:34: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nauth_headers = {'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NTU1NTMwNzksImV4cCI6MTc1NTU1NjY3OSwicm9sZXM...oslHbToKSC6ZAgjaSa0SOxpHDRKC9ujG3HPDKlSIM7zZ_sLwxJ0BPoGZyCvUWsBUBGo0Gi7IDTuZ01U6uEASctJHzZ-iKxD_UeVYccQGSHfTd1_xQ6riU'}\n\n    @pytest.mark.functional\n    @pytest.mark.medium\n    def test_TC181_validar_paginacion_basica(auth_headers):\n        page, items_per_page = 1, 2\n        params = {\"page\": page, \"itemsPerPage\": items_per_page}\n    \n        endpoint = EndpointCustomerGroup.customer_group_with_params(page=page, itemsPerPage=items_per_page)\n        response = SyliusRequest.get(endpoint, auth_headers)\n    \n        log_request_response(endpoint, response, headers=auth_headers)\n    \n        AssertionStatusCode.assert_status_code_200(response)\n>       AssertionCustomerGroupFields.assert_customer_group_pagination(response.json(), params)\n\ntests/customer/groups/test_HU01_PD_GET_Customer_Group.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse_json = {'@context': '/api/v2/contexts/CustomerGroup', '@id': '/api/v2/admin/customer-groups', '@type': 'hydra:Collection', 'h...id': '/api/v2/admin/customer-groups/wholesale', '@type': 'CustomerGroup', 'code': 'wholesale', 'id': 11790, ...}], ...}\nparams = {'itemsPerPage': 2, 'page': 1}\n\n    @staticmethod\n    def assert_customer_group_pagination(response_json, params):\n        \"\"\"Valida que la paginación coincida con los parámetros enviados\"\"\"\n        try:\n            expected_count = params.get(\"itemsPerPage\")\n            page = params.get(\"page\", 1)\n            if expected_count is not None:\n                assert len(response_json[\"hydra:member\"]) == expected_count, \\\n                    \"No coincide la cantidad de elementos solicitada\"\n    \n                # Construir las posibles URLs esperadas\n                if expected_count == 0:\n                    expected_ids = [f\"/api/v2/admin/customer-groups?itemsPerPage={expected_count}\"]\n                else:\n                    # Algunas APIs incluyen page=1 explícitamente, otras no\n                    if page == 1:\n                        expected_ids = [\n                            f\"/api/v2/admin/customer-groups?itemsPerPage={expected_count}\",\n                            f\"/api/v2/admin/customer-groups?itemsPerPage={expected_count}&page={page}\"\n                        ]\n                    else:\n                        expected_ids = [f\"/api/v2/admin/customer-groups?itemsPerPage={expected_count}&page={page}\"]\n    \n                actual_id = response_json[\"hydra:view\"][\"@id\"]\n                assert actual_id in expected_ids, \\\n                    f\"No coincide: 'hydra:view.@id'. Expected one of: {expected_ids}, Actual: {actual_id}\"\n        except AssertionError as e:\n>           pytest.fail(f\"Error en paginación de Customer Group: {e}\")\nE           Failed: Error en paginación de Customer Group: No coincide la cantidad de elementos solicitada\n\nsrc/assertions/customergroup_assertions/customer_group_get_content_assertions.py:54: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1755553079177,"stop":1755553079178,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"auth_headers","time":{"start":1755553079178,"stop":1755553079831,"duration":653},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"Failed: Error en paginación de Customer Group: No coincide la cantidad de elementos solicitada","statusTrace":"response_json = {'@context': '/api/v2/contexts/CustomerGroup', '@id': '/api/v2/admin/customer-groups', '@type': 'hydra:Collection', 'h...id': '/api/v2/admin/customer-groups/wholesale', '@type': 'CustomerGroup', 'code': 'wholesale', 'id': 11790, ...}], ...}\nparams = {'itemsPerPage': 2, 'page': 1}\n\n    @staticmethod\n    def assert_customer_group_pagination(response_json, params):\n        \"\"\"Valida que la paginación coincida con los parámetros enviados\"\"\"\n        try:\n            expected_count = params.get(\"itemsPerPage\")\n            page = params.get(\"page\", 1)\n            if expected_count is not None:\n>               assert len(response_json[\"hydra:member\"]) == expected_count, \\\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                    \"No coincide la cantidad de elementos solicitada\"\nE                   AssertionError: No coincide la cantidad de elementos solicitada\n\nsrc/assertions/customergroup_assertions/customer_group_get_content_assertions.py:34: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nauth_headers = {'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NTU1NTMwNzksImV4cCI6MTc1NTU1NjY3OSwicm9sZXM...oslHbToKSC6ZAgjaSa0SOxpHDRKC9ujG3HPDKlSIM7zZ_sLwxJ0BPoGZyCvUWsBUBGo0Gi7IDTuZ01U6uEASctJHzZ-iKxD_UeVYccQGSHfTd1_xQ6riU'}\n\n    @pytest.mark.functional\n    @pytest.mark.medium\n    def test_TC181_validar_paginacion_basica(auth_headers):\n        page, items_per_page = 1, 2\n        params = {\"page\": page, \"itemsPerPage\": items_per_page}\n    \n        endpoint = EndpointCustomerGroup.customer_group_with_params(page=page, itemsPerPage=items_per_page)\n        response = SyliusRequest.get(endpoint, auth_headers)\n    \n        log_request_response(endpoint, response, headers=auth_headers)\n    \n        AssertionStatusCode.assert_status_code_200(response)\n>       AssertionCustomerGroupFields.assert_customer_group_pagination(response.json(), params)\n\ntests/customer/groups/test_HU01_PD_GET_Customer_Group.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse_json = {'@context': '/api/v2/contexts/CustomerGroup', '@id': '/api/v2/admin/customer-groups', '@type': 'hydra:Collection', 'h...id': '/api/v2/admin/customer-groups/wholesale', '@type': 'CustomerGroup', 'code': 'wholesale', 'id': 11790, ...}], ...}\nparams = {'itemsPerPage': 2, 'page': 1}\n\n    @staticmethod\n    def assert_customer_group_pagination(response_json, params):\n        \"\"\"Valida que la paginación coincida con los parámetros enviados\"\"\"\n        try:\n            expected_count = params.get(\"itemsPerPage\")\n            page = params.get(\"page\", 1)\n            if expected_count is not None:\n                assert len(response_json[\"hydra:member\"]) == expected_count, \\\n                    \"No coincide la cantidad de elementos solicitada\"\n    \n                # Construir las posibles URLs esperadas\n                if expected_count == 0:\n                    expected_ids = [f\"/api/v2/admin/customer-groups?itemsPerPage={expected_count}\"]\n                else:\n                    # Algunas APIs incluyen page=1 explícitamente, otras no\n                    if page == 1:\n                        expected_ids = [\n                            f\"/api/v2/admin/customer-groups?itemsPerPage={expected_count}\",\n                            f\"/api/v2/admin/customer-groups?itemsPerPage={expected_count}&page={page}\"\n                        ]\n                    else:\n                        expected_ids = [f\"/api/v2/admin/customer-groups?itemsPerPage={expected_count}&page={page}\"]\n    \n                actual_id = response_json[\"hydra:view\"][\"@id\"]\n                assert actual_id in expected_ids, \\\n                    f\"No coincide: 'hydra:view.@id'. Expected one of: {expected_ids}, Actual: {actual_id}\"\n        except AssertionError as e:\n>           pytest.fail(f\"Error en paginación de Customer Group: {e}\")\nE           Failed: Error en paginación de Customer Group: No coincide la cantidad de elementos solicitada\n\nsrc/assertions/customergroup_assertions/customer_group_get_content_assertions.py:54: Failed","steps":[],"attachments":[{"uid":"323d2197c7737537","name":"log","source":"323d2197c7737537.txt","type":"text/plain","size":2974}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"medium"},{"name":"tag","value":"functional"},{"name":"parentSuite","value":"tests.customer.groups"},{"name":"suite","value":"test_HU01_PD_GET_Customer_Group"},{"name":"host","value":"pkrvmubgrv54qmi"},{"name":"thread","value":"2452-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.customer.groups.test_HU01_PD_GET_Customer_Group"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":6,"unknown":0,"total":8},"items":[{"uid":"f20948f53dbd9ba5","reportUrl":"https://Elv500.github.io/Softsign/93//#testresult/f20948f53dbd9ba5","status":"failed","statusDetails":"Failed: Error en paginación de Customer Group: No coincide la cantidad de elementos solicitada","time":{"start":1755552808107,"stop":1755552808267,"duration":160}},{"uid":"458c4e5f9524ac65","reportUrl":"https://Elv500.github.io/Softsign/92//#testresult/458c4e5f9524ac65","status":"passed","time":{"start":1755552547456,"stop":1755552547958,"duration":502}},{"uid":"fa3409c656193424","reportUrl":"https://Elv500.github.io/Softsign/66//#testresult/fa3409c656193424","status":"passed","time":{"start":1755545965205,"stop":1755545965723,"duration":518}},{"uid":"6daedf14b69047be","reportUrl":"https://Elv500.github.io/Softsign/62//#testresult/6daedf14b69047be","status":"passed","time":{"start":1755545546546,"stop":1755545546904,"duration":358}},{"uid":"3dd12360fa0325bf","reportUrl":"https://Elv500.github.io/Softsign/61//#testresult/3dd12360fa0325bf","status":"passed","time":{"start":1755545387912,"stop":1755545388408,"duration":496}},{"uid":"1e08659b9f41419c","reportUrl":"https://Elv500.github.io/Softsign/59//#testresult/1e08659b9f41419c","status":"passed","time":{"start":1755545160612,"stop":1755545160963,"duration":351}},{"uid":"912327b1a4c1da8f","reportUrl":"https://Elv500.github.io/Softsign/57//#testresult/912327b1a4c1da8f","status":"passed","time":{"start":1755544371501,"stop":1755544372337,"duration":836}}]},"tags":["functional","medium"]},"source":"857774d342a49973.json","parameterValues":[]}