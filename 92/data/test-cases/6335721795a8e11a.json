{"uid":"6335721795a8e11a","name":"test_full_tax_category_crud_flow","fullName":"tests.configuration.tax_categories.test_HU50_E2E_CRUD_TaxCategory#test_full_tax_category_crud_flow","historyId":"f3735251785a25d7be5e17bc8dbf08da","time":{"start":1755552544687,"stop":1755552545156,"duration":469},"status":"failed","statusMessage":"AssertionError","statusTrace":"setup_e2e_tax_category = ({'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NTU1NTIyNDcsImV4cCI6MTc1NTU1NTg0Nywicm9sZX...w6D3_Zq91reoEHfgzJm_DeHV9VG-CnJBLIBjIhIPWwfJnxD5mH7_7SYYOeRPGxUICsfYETBQ3qu7UQ-Ha-t5LZuBcFK0mmLGj4J1S6cHf7icsTtY'}, [])\n\n    @pytest.mark.e2e\n    @pytest.mark.tax_category\n    def test_full_tax_category_crud_flow(setup_e2e_tax_category):\n        auth_headers, created_tax_categories = setup_e2e_tax_category\n    \n        # 1. Crear\n        initial_data = generate_tax_category_data()\n        create_url = EndpointTaxCategory.tax_category()\n        create_response = SyliusRequest.post(create_url, auth_headers, initial_data)\n        log_request_response(create_url, create_response, headers=auth_headers, payload=initial_data)\n>       AssertionStatusCode.assert_status_code_201(create_response)\n\ntests/configuration/tax_categories/test_HU50_E2E_CRUD_TaxCategory.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [422]>\n\n    @staticmethod\n    def assert_status_code_201(response):\n>       assert response.status_code == 201\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError\n\nsrc/assertions/status_code_assertions.py:15: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1755552246620,"stop":1755552246621,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"auth_headers","time":{"start":1755552246621,"stop":1755552247430,"duration":809},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_e2e_tax_category","time":{"start":1755552544687,"stop":1755552544687,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"setup_e2e_tax_category = ({'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NTU1NTIyNDcsImV4cCI6MTc1NTU1NTg0Nywicm9sZX...w6D3_Zq91reoEHfgzJm_DeHV9VG-CnJBLIBjIhIPWwfJnxD5mH7_7SYYOeRPGxUICsfYETBQ3qu7UQ-Ha-t5LZuBcFK0mmLGj4J1S6cHf7icsTtY'}, [])\n\n    @pytest.mark.e2e\n    @pytest.mark.tax_category\n    def test_full_tax_category_crud_flow(setup_e2e_tax_category):\n        auth_headers, created_tax_categories = setup_e2e_tax_category\n    \n        # 1. Crear\n        initial_data = generate_tax_category_data()\n        create_url = EndpointTaxCategory.tax_category()\n        create_response = SyliusRequest.post(create_url, auth_headers, initial_data)\n        log_request_response(create_url, create_response, headers=auth_headers, payload=initial_data)\n>       AssertionStatusCode.assert_status_code_201(create_response)\n\ntests/configuration/tax_categories/test_HU50_E2E_CRUD_TaxCategory.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [422]>\n\n    @staticmethod\n    def assert_status_code_201(response):\n>       assert response.status_code == 201\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError\n\nsrc/assertions/status_code_assertions.py:15: AssertionError","steps":[],"attachments":[{"uid":"4e0ec32c395f2fb7","name":"log","source":"4e0ec32c395f2fb7.txt","type":"text/plain","size":2354}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"setup_e2e_tax_category::0","time":{"start":1755552545159,"stop":1755552545159,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"tax_category"},{"name":"tag","value":"e2e"},{"name":"parentSuite","value":"tests.configuration.tax_categories"},{"name":"suite","value":"test_HU50_E2E_CRUD_TaxCategory"},{"name":"host","value":"pkrvmubgrv54qmi"},{"name":"thread","value":"2380-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.configuration.tax_categories.test_HU50_E2E_CRUD_TaxCategory"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"b0753adc3228c7e0","reportUrl":"https://Elv500.github.io/Softsign/68//#testresult/b0753adc3228c7e0","status":"passed","time":{"start":1755546240594,"stop":1755546242303,"duration":1709}},{"uid":"3ce076c533cafd26","reportUrl":"https://Elv500.github.io/Softsign/57//#testresult/3ce076c533cafd26","status":"passed","time":{"start":1755544364779,"stop":1755544368123,"duration":3344}}]},"tags":["tax_category","e2e"]},"source":"6335721795a8e11a.json","parameterValues":[]}