{"uid":"f67d97207f93d89e","name":"test_TC363_398_No_permitir_campos_vacios[invalid_payload4-solo dato invalido.-400]","fullName":"tests.configuration.tax_categories.test_HU29_KG_PUT_TaxCategory#test_TC363_398_No_permitir_campos_vacios","historyId":"3b7fa60e1722d98be6990be5f589dd1d","time":{"start":1755552530591,"stop":1755552531225,"duration":634},"status":"skipped","statusMessage":"XFAIL known issue La app permite espacios vacios y campos invalidos BUG\n\nAssertionError: Esperado status 400, obtenido 422\nassert 422 == 400\n +  where 422 = <Response [422]>.status_code","statusTrace":"setup_edit_tax_category = ({'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NTU1NTIyNDcsImV4cCI6MTc1NTU1NTg0Nywicm9sZX...xts/TaxCategory', '@id': '/api/v2/admin/tax-categories/TAX-8aaaf2', '@type': 'TaxCategory', 'code': 'TAX-8aaaf2', ...})\ninvalid_payload = {'name': '+'}, expected_error = 'solo dato invalido.'\nexpected_status = 400\n\n    @pytest.mark.high\n    @pytest.mark.negative\n    @pytest.mark.functional\n    @pytest.mark.xfail(reason=\"known issue La app permite espacios vacios y campos invalidos BUG\", run=True)\n    @pytest.mark.parametrize(\"invalid_payload,expected_error,expected_status\", [\n        ({\"name\": \"\"}, \"Please enter tax category name.\", 422),\n        ({\"name\": \"   \"}, None, 422), #en este caso deberia de fallar pero manda como bien con 200\n        ({\"name\": None}, \"The type of the \\\"name\\\" attribute must be \\\"string\\\"\", 400),\n        ({\"name\": \"Válido\", \"description\": \"\"}, None, 200),\n        ({\"name\": \"+\"}, \"solo dato invalido.\", 400) #no ingresar con semantica incorrecta\n    ])\n    def test_TC363_398_No_permitir_campos_vacios(setup_edit_tax_category, invalid_payload, expected_error, expected_status):\n        headers, tax_category_data = setup_edit_tax_category\n        url = EndpointTaxCategory.code(tax_category_data[\"code\"])\n        initial_response = SyliusRequest.get(url, headers)\n        initial_data = initial_response.json()\n        log_request_response(url, initial_response, headers)\n        response = SyliusRequest.put(url, headers, invalid_payload)\n        log_request_response(url, response, headers, invalid_payload)\n>       assert response.status_code == expected_status, f\"Esperado status {expected_status}, obtenido {response.status_code}\"\nE       AssertionError: Esperado status 400, obtenido 422\nE       assert 422 == 400\nE        +  where 422 = <Response [422]>.status_code\n\ntests/configuration/tax_categories/test_HU29_KG_PUT_TaxCategory.py:79: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1755552246620,"stop":1755552246621,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"auth_headers","time":{"start":1755552246621,"stop":1755552247430,"duration":809},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_edit_tax_category","time":{"start":1755552530104,"stop":1755552530590,"duration":486},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL known issue La app permite espacios vacios y campos invalidos BUG\n\nAssertionError: Esperado status 400, obtenido 422\nassert 422 == 400\n +  where 422 = <Response [422]>.status_code","statusTrace":"setup_edit_tax_category = ({'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NTU1NTIyNDcsImV4cCI6MTc1NTU1NTg0Nywicm9sZX...xts/TaxCategory', '@id': '/api/v2/admin/tax-categories/TAX-8aaaf2', '@type': 'TaxCategory', 'code': 'TAX-8aaaf2', ...})\ninvalid_payload = {'name': '+'}, expected_error = 'solo dato invalido.'\nexpected_status = 400\n\n    @pytest.mark.high\n    @pytest.mark.negative\n    @pytest.mark.functional\n    @pytest.mark.xfail(reason=\"known issue La app permite espacios vacios y campos invalidos BUG\", run=True)\n    @pytest.mark.parametrize(\"invalid_payload,expected_error,expected_status\", [\n        ({\"name\": \"\"}, \"Please enter tax category name.\", 422),\n        ({\"name\": \"   \"}, None, 422), #en este caso deberia de fallar pero manda como bien con 200\n        ({\"name\": None}, \"The type of the \\\"name\\\" attribute must be \\\"string\\\"\", 400),\n        ({\"name\": \"Válido\", \"description\": \"\"}, None, 200),\n        ({\"name\": \"+\"}, \"solo dato invalido.\", 400) #no ingresar con semantica incorrecta\n    ])\n    def test_TC363_398_No_permitir_campos_vacios(setup_edit_tax_category, invalid_payload, expected_error, expected_status):\n        headers, tax_category_data = setup_edit_tax_category\n        url = EndpointTaxCategory.code(tax_category_data[\"code\"])\n        initial_response = SyliusRequest.get(url, headers)\n        initial_data = initial_response.json()\n        log_request_response(url, initial_response, headers)\n        response = SyliusRequest.put(url, headers, invalid_payload)\n        log_request_response(url, response, headers, invalid_payload)\n>       assert response.status_code == expected_status, f\"Esperado status {expected_status}, obtenido {response.status_code}\"\nE       AssertionError: Esperado status 400, obtenido 422\nE       assert 422 == 400\nE        +  where 422 = <Response [422]>.status_code\n\ntests/configuration/tax_categories/test_HU29_KG_PUT_TaxCategory.py:79: AssertionError","steps":[],"attachments":[{"uid":"6915d1b2cf14b298","name":"log","source":"6915d1b2cf14b298.txt","type":"text/plain","size":4428}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"setup_edit_tax_category::0","time":{"start":1755552531232,"stop":1755552531455,"duration":223},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"functional"},{"name":"tag","value":"negative"},{"name":"tag","value":"high"},{"name":"parentSuite","value":"tests.configuration.tax_categories"},{"name":"suite","value":"test_HU29_KG_PUT_TaxCategory"},{"name":"host","value":"pkrvmubgrv54qmi"},{"name":"thread","value":"2380-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.configuration.tax_categories.test_HU29_KG_PUT_TaxCategory"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_error","value":"'solo dato invalido.'"},{"name":"expected_status","value":"400"},{"name":"invalid_payload","value":"{'name': '+'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":3,"passed":0,"unknown":0,"total":3},"items":[{"uid":"291fa893f611a58c","reportUrl":"https://Elv500.github.io/Softsign/68//#testresult/291fa893f611a58c","status":"skipped","statusDetails":"XFAIL known issue La app permite espacios vacios y campos invalidos BUG\n\nAssertionError: Esperado status 400, obtenido 422\nassert 422 == 400\n +  where 422 = <Response [422]>.status_code","time":{"start":1755546228209,"stop":1755546228895,"duration":686}},{"uid":"5fd191b8ea945abf","reportUrl":"https://Elv500.github.io/Softsign/57//#testresult/5fd191b8ea945abf","status":"skipped","statusDetails":"XFAIL known issue La app permite espacios vacios y campos invalidos BUG\n\nAssertionError: Esperado status 400, obtenido 422\nassert 422 == 400\n +  where 422 = <Response [422]>.status_code","time":{"start":1755544343502,"stop":1755544344760,"duration":1258}}]},"tags":["functional","negative","high"]},"source":"f67d97207f93d89e.json","parameterValues":["'solo dato invalido.'","400","{'name': '+'}"]}