{"uid":"2e64c857875817a1","name":"test_TC240_verificar_respuesta_token_invalido_o_sin_autenticacion","fullName":"tests.configuration.tax_categories.test_HU08_KG_GET_TaxCatergoryList#test_TC240_verificar_respuesta_token_invalido_o_sin_autenticacion","historyId":"e6b92e83a208ba594b1ad57bf24f01ab","time":{"start":1755291272852,"stop":1755291273057,"duration":205},"status":"failed","statusMessage":"AssertionError","statusTrace":"@pytest.mark.functional\n    @pytest.mark.negative\n    @pytest.mark.smoke\n    def test_TC240_verificar_respuesta_token_invalido_o_sin_autenticacion():\n        url = EndpointTaxCategory.tax_category()\n        response = requests.get(url)  # Sin headers\n        log_request_response(url=url, response=response)\n>       AssertionStatusCode.assert_status_code_401(response)\n\ntests/configuration/tax_categories/test_HU08_KG_GET_TaxCatergoryList.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [404]>\n\n    @staticmethod\n    def assert_status_code_401(response):\n>       assert response.status_code == 401\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError\n\nsrc/assertions/status_code_assertions.py:27: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1755291258725,"stop":1755291258725,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"@pytest.mark.functional\n    @pytest.mark.negative\n    @pytest.mark.smoke\n    def test_TC240_verificar_respuesta_token_invalido_o_sin_autenticacion():\n        url = EndpointTaxCategory.tax_category()\n        response = requests.get(url)  # Sin headers\n        log_request_response(url=url, response=response)\n>       AssertionStatusCode.assert_status_code_401(response)\n\ntests/configuration/tax_categories/test_HU08_KG_GET_TaxCatergoryList.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [404]>\n\n    @staticmethod\n    def assert_status_code_401(response):\n>       assert response.status_code == 401\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError\n\nsrc/assertions/status_code_assertions.py:27: AssertionError","steps":[],"attachments":[{"uid":"3613999b3ae3cb22","name":"log","source":"3613999b3ae3cb22.txt","type":"text/plain","size":26436}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"smoke"},{"name":"tag","value":"negative"},{"name":"tag","value":"functional"},{"name":"parentSuite","value":"tests.configuration.tax_categories"},{"name":"suite","value":"test_HU08_KG_GET_TaxCatergoryList"},{"name":"host","value":"pkrvmubgrv54qmi"},{"name":"thread","value":"2507-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.configuration.tax_categories.test_HU08_KG_GET_TaxCatergoryList"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"14012e4a961909c8","reportUrl":"https://Elv500.github.io/Softsign/27//#testresult/14012e4a961909c8","status":"passed","time":{"start":1755149138892,"stop":1755149139084,"duration":192}},{"uid":"41f7cd1d7a073bcc","reportUrl":"https://Elv500.github.io/Softsign/26//#testresult/41f7cd1d7a073bcc","status":"passed","time":{"start":1755146221609,"stop":1755146221801,"duration":192}}]},"tags":["negative","functional","smoke"]},"source":"2e64c857875817a1.json","parameterValues":[]}