{"uid":"8f8d37a5fa6d5a3","name":"test_TC228_Verificar_creacion_de_opcion_sin_autenticacion","fullName":"tests.catalog.options.test_HU11_ES_POST_ProductOption#test_TC228_Verificar_creacion_de_opcion_sin_autenticacion","historyId":"71ce26214b4153683260b2a404176759","time":{"start":1755291270231,"stop":1755291270445,"duration":214},"status":"failed","statusMessage":"AssertionError","statusTrace":"@pytest.mark.smoke\n    @pytest.mark.negative\n    def test_TC228_Verificar_creacion_de_opcion_sin_autenticacion():\n        payload = generate_options_source_data()\n        response = SyliusRequest.post(EndpointOptions.options(), headers=None, payload=payload)\n        log_request_response(EndpointOptions.options(), response, headers=None, payload=payload)\n>       AssertionStatusCode.assert_status_code_401(response)\n\ntests/catalog/options/test_HU11_ES_POST_ProductOption.py:183: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [404]>\n\n    @staticmethod\n    def assert_status_code_401(response):\n>       assert response.status_code == 401\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError\n\nsrc/assertions/status_code_assertions.py:27: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1755291258725,"stop":1755291258725,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"@pytest.mark.smoke\n    @pytest.mark.negative\n    def test_TC228_Verificar_creacion_de_opcion_sin_autenticacion():\n        payload = generate_options_source_data()\n        response = SyliusRequest.post(EndpointOptions.options(), headers=None, payload=payload)\n        log_request_response(EndpointOptions.options(), response, headers=None, payload=payload)\n>       AssertionStatusCode.assert_status_code_401(response)\n\ntests/catalog/options/test_HU11_ES_POST_ProductOption.py:183: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [404]>\n\n    @staticmethod\n    def assert_status_code_401(response):\n>       assert response.status_code == 401\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError\n\nsrc/assertions/status_code_assertions.py:27: AssertionError","steps":[],"attachments":[{"uid":"a10e353ae8ed22e0","name":"log","source":"a10e353ae8ed22e0.txt","type":"text/plain","size":26645}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"negative"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests.catalog.options"},{"name":"suite","value":"test_HU11_ES_POST_ProductOption"},{"name":"host","value":"pkrvmubgrv54qmi"},{"name":"thread","value":"2507-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.catalog.options.test_HU11_ES_POST_ProductOption"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"ea0c53035530a0ca","reportUrl":"https://Elv500.github.io/Softsign/27//#testresult/ea0c53035530a0ca","status":"passed","time":{"start":1755149134437,"stop":1755149134700,"duration":263}},{"uid":"ef40d0810e3232fc","reportUrl":"https://Elv500.github.io/Softsign/26//#testresult/ef40d0810e3232fc","status":"passed","time":{"start":1755146219320,"stop":1755146219505,"duration":185}}]},"tags":["negative","smoke"]},"source":"8f8d37a5fa6d5a3.json","parameterValues":[]}