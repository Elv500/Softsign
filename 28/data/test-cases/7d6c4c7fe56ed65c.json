{"uid":"7d6c4c7fe56ed65c","name":"test_tc325_Verificar_error_al_intentar_actualizar_opción_con_token_inválido","fullName":"tests.catalog.options.test_HU25_ES_PUT_ProductOption#test_tc325_Verificar_error_al_intentar_actualizar_opción_con_token_inválido","historyId":"ae82423c7464521b041c5cb5ca55c514","time":{"start":1755291271459,"stop":1755291271662,"duration":203},"status":"failed","statusMessage":"AssertionError","statusTrace":"@pytest.mark.security\n    @pytest.mark.negative\n    def test_tc325_Verificar_error_al_intentar_actualizar_opción_con_token_inválido():\n        code = \"test_code_inexistente\"\n        updated_payload = generate_updated_options_payload(code, \"test_translation_id_inexistente\")\n        headers = {\"Authorization\": \"Bearer invalid_token\"}\n        response = SyliusRequest().put_with_custom_headers(EndpointOptions.code(code), headers, updated_payload)\n        log_request_response(EndpointOptions.code(code), response, headers, updated_payload)\n>       AssertionStatusCode.assert_status_code_401(response)\n\ntests/catalog/options/test_HU25_ES_PUT_ProductOption.py:199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [404]>\n\n    @staticmethod\n    def assert_status_code_401(response):\n>       assert response.status_code == 401\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError\n\nsrc/assertions/status_code_assertions.py:27: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1755291258725,"stop":1755291258725,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"@pytest.mark.security\n    @pytest.mark.negative\n    def test_tc325_Verificar_error_al_intentar_actualizar_opción_con_token_inválido():\n        code = \"test_code_inexistente\"\n        updated_payload = generate_updated_options_payload(code, \"test_translation_id_inexistente\")\n        headers = {\"Authorization\": \"Bearer invalid_token\"}\n        response = SyliusRequest().put_with_custom_headers(EndpointOptions.code(code), headers, updated_payload)\n        log_request_response(EndpointOptions.code(code), response, headers, updated_payload)\n>       AssertionStatusCode.assert_status_code_401(response)\n\ntests/catalog/options/test_HU25_ES_PUT_ProductOption.py:199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [404]>\n\n    @staticmethod\n    def assert_status_code_401(response):\n>       assert response.status_code == 401\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError\n\nsrc/assertions/status_code_assertions.py:27: AssertionError","steps":[],"attachments":[{"uid":"2e3944be3b38fdf0","name":"log","source":"2e3944be3b38fdf0.txt","type":"text/plain","size":26833}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"negative"},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests.catalog.options"},{"name":"suite","value":"test_HU25_ES_PUT_ProductOption"},{"name":"host","value":"pkrvmubgrv54qmi"},{"name":"thread","value":"2507-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.catalog.options.test_HU25_ES_PUT_ProductOption"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["negative","security"]},"source":"7d6c4c7fe56ed65c.json","parameterValues":[]}