{"uid":"45f587d812d4ae7","name":"test_TC274_actualizar_grupo_sin_campo_name","fullName":"tests.customer.groups.test_HU03_PD_PUT_CustomerGroup#test_TC274_actualizar_grupo_sin_campo_name","historyId":"67a9cc8997aa3147c77d23a0dfffb88b","time":{"start":1755544412731,"stop":1755544413981,"duration":1250},"status":"skipped","statusMessage":"XFAIL Known issue BugId: CG-03 Permite actualizar el campo name vacio cuando es obligatorio\n\nAssertionError","statusTrace":"setup_customer_group_cleanup = ({'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NTU1NDM5NTUsImV4cCI6MTc1NTU0NzU1NSwicm9sZX...rPVKiwQTkepKI2qZmuSeq4WJf4'}, <function setup_customer_group_cleanup.<locals>.add_group_for_cleanup at 0x7f1f816af100>)\n\n    @pytest.mark.negative\n    @pytest.mark.boundary\n    @pytest.mark.xfail(reason=\"Known issue BugId: CG-03 Permite actualizar el campo name vacio cuando es obligatorio\", run=True)\n    @pytest.mark.high\n    def test_TC274_actualizar_grupo_sin_campo_name(setup_customer_group_cleanup):\n        auth_headers, add_group_for_cleanup = setup_customer_group_cleanup\n    \n        initial_data = generate_customer_group_source_data()\n        create_endpoint = EndpointCustomerGroup.customer_group()\n        create_response = SyliusRequest.post(create_endpoint, auth_headers, initial_data)\n        AssertionStatusCode.assert_status_code_201(create_response)\n    \n        customer_group_code = create_response.json()[\"code\"]\n        add_group_for_cleanup(customer_group_code)\n    \n        data = {}\n        endpoint = EndpointCustomerGroup.code(customer_group_code)\n        response = SyliusRequest.put(endpoint, auth_headers, data)\n    \n        log_request_response(endpoint, response, headers=auth_headers, payload=data)\n>       AssertionStatusCode.assert_status_code_422(response)\n\ntests/customer/groups/test_HU03_PD_PUT_CustomerGroup.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>\n\n    @staticmethod\n    def assert_status_code_422(response):\n>       assert response.status_code == 422\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError\n\nsrc/assertions/status_code_assertions.py:59: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1755543954615,"stop":1755543954615,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"auth_headers","time":{"start":1755543954616,"stop":1755543956074,"duration":1458},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_customer_group_cleanup","time":{"start":1755544412731,"stop":1755544412731,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL Known issue BugId: CG-03 Permite actualizar el campo name vacio cuando es obligatorio\n\nAssertionError","statusTrace":"setup_customer_group_cleanup = ({'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NTU1NDM5NTUsImV4cCI6MTc1NTU0NzU1NSwicm9sZX...rPVKiwQTkepKI2qZmuSeq4WJf4'}, <function setup_customer_group_cleanup.<locals>.add_group_for_cleanup at 0x7f1f816af100>)\n\n    @pytest.mark.negative\n    @pytest.mark.boundary\n    @pytest.mark.xfail(reason=\"Known issue BugId: CG-03 Permite actualizar el campo name vacio cuando es obligatorio\", run=True)\n    @pytest.mark.high\n    def test_TC274_actualizar_grupo_sin_campo_name(setup_customer_group_cleanup):\n        auth_headers, add_group_for_cleanup = setup_customer_group_cleanup\n    \n        initial_data = generate_customer_group_source_data()\n        create_endpoint = EndpointCustomerGroup.customer_group()\n        create_response = SyliusRequest.post(create_endpoint, auth_headers, initial_data)\n        AssertionStatusCode.assert_status_code_201(create_response)\n    \n        customer_group_code = create_response.json()[\"code\"]\n        add_group_for_cleanup(customer_group_code)\n    \n        data = {}\n        endpoint = EndpointCustomerGroup.code(customer_group_code)\n        response = SyliusRequest.put(endpoint, auth_headers, data)\n    \n        log_request_response(endpoint, response, headers=auth_headers, payload=data)\n>       AssertionStatusCode.assert_status_code_422(response)\n\ntests/customer/groups/test_HU03_PD_PUT_CustomerGroup.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>\n\n    @staticmethod\n    def assert_status_code_422(response):\n>       assert response.status_code == 422\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError\n\nsrc/assertions/status_code_assertions.py:59: AssertionError","steps":[],"attachments":[{"uid":"ddf38f1d7471deb5","name":"log","source":"ddf38f1d7471deb5.txt","type":"text/plain","size":2131},{"uid":"39ba6c5990331d4c","name":"stdout","source":"39ba6c5990331d4c.txt","type":"text/plain","size":47}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup_customer_group_cleanup::0","time":{"start":1755544413990,"stop":1755544414351,"duration":361},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"high"},{"name":"tag","value":"boundary"},{"name":"tag","value":"negative"},{"name":"parentSuite","value":"tests.customer.groups"},{"name":"suite","value":"test_HU03_PD_PUT_CustomerGroup"},{"name":"host","value":"pkrvmubgrv54qmi"},{"name":"thread","value":"2416-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.customer.groups.test_HU03_PD_PUT_CustomerGroup"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["boundary","high","negative"]},"source":"45f587d812d4ae7.json","parameterValues":[]}