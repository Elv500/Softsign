{"uid":"a325cc8ad412e022","name":"test_tc327_Verificar_que_se_puede_actualizar_opci贸n_con_values","fullName":"tests.catalog.options.test_HU25_ES_PUT_ProductOption#test_tc327_Verificar_que_se_puede_actualizar_opci贸n_con_values","historyId":"5e89158bacc214eaca1399da99d9f0ce","time":{"start":1755555663832,"stop":1755555663990,"duration":158},"status":"failed","statusMessage":"AssertionError","statusTrace":"setup_options_cleanup = ({'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NTU1NTU1OTgsImV4cCI6MTc1NTU1OTE5OCwicm9sZX...58_g2tWM_TFZf2vrMRPvn5r1QgkH6FY0'}, <function setup_options_cleanup.<locals>.add_option_for_cleanup at 0x7f00bc272d40>)\n\n    @pytest.mark.functional\n    @pytest.mark.smoke\n    @pytest.mark.high\n    def test_tc327_Verificar_que_se_puede_actualizar_opci贸n_con_values(setup_options_cleanup):\n        headers, add_option_for_cleanup = setup_options_cleanup\n        payload = generate_options_source_data_with_values()\n        response = SyliusRequest.post(EndpointOptions.options(), headers, payload)\n        log_request_response(EndpointOptions.options(), response, headers, payload)\n>       AssertionStatusCode.assert_status_code_201(response)\n\ntests/catalog/options/test_HU25_ES_PUT_ProductOption.py:240: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [422]>\n\n    @staticmethod\n    def assert_status_code_201(response):\n>       assert response.status_code == 201\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError\n\nsrc/assertions/status_code_assertions.py:15: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1755555598237,"stop":1755555598238,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"auth_headers","time":{"start":1755555598238,"stop":1755555598735,"duration":497},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_options_cleanup","time":{"start":1755555663832,"stop":1755555663832,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"setup_options_cleanup = ({'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NTU1NTU1OTgsImV4cCI6MTc1NTU1OTE5OCwicm9sZX...58_g2tWM_TFZf2vrMRPvn5r1QgkH6FY0'}, <function setup_options_cleanup.<locals>.add_option_for_cleanup at 0x7f00bc272d40>)\n\n    @pytest.mark.functional\n    @pytest.mark.smoke\n    @pytest.mark.high\n    def test_tc327_Verificar_que_se_puede_actualizar_opci贸n_con_values(setup_options_cleanup):\n        headers, add_option_for_cleanup = setup_options_cleanup\n        payload = generate_options_source_data_with_values()\n        response = SyliusRequest.post(EndpointOptions.options(), headers, payload)\n        log_request_response(EndpointOptions.options(), response, headers, payload)\n>       AssertionStatusCode.assert_status_code_201(response)\n\ntests/catalog/options/test_HU25_ES_PUT_ProductOption.py:240: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [422]>\n\n    @staticmethod\n    def assert_status_code_201(response):\n>       assert response.status_code == 201\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError\n\nsrc/assertions/status_code_assertions.py:15: AssertionError","steps":[],"attachments":[{"uid":"5e41d1c95c6e7285","name":"log","source":"5e41d1c95c6e7285.txt","type":"text/plain","size":2646}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"setup_options_cleanup::0","time":{"start":1755555664000,"stop":1755555664000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"high"},{"name":"tag","value":"smoke"},{"name":"tag","value":"functional"},{"name":"parentSuite","value":"tests.catalog.options"},{"name":"suite","value":"test_HU25_ES_PUT_ProductOption"},{"name":"host","value":"pkrvmubgrv54qmi"},{"name":"thread","value":"2403-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.catalog.options.test_HU25_ES_PUT_ProductOption"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":9,"unknown":0,"total":10},"items":[{"uid":"8682f3914745557e","reportUrl":"https://Elv500.github.io/Softsign/96//#testresult/8682f3914745557e","status":"passed","time":{"start":1755555056171,"stop":1755555057220,"duration":1049}},{"uid":"e3b63f6b5ef072d","reportUrl":"https://Elv500.github.io/Softsign/95//#testresult/e3b63f6b5ef072d","status":"passed","time":{"start":1755553480337,"stop":1755553480943,"duration":606}},{"uid":"dd9aa06912215004","reportUrl":"https://Elv500.github.io/Softsign/94//#testresult/dd9aa06912215004","status":"passed","time":{"start":1755553169261,"stop":1755553169781,"duration":520}},{"uid":"f21b92aa365b0a75","reportUrl":"https://Elv500.github.io/Softsign/93//#testresult/f21b92aa365b0a75","status":"passed","time":{"start":1755552776630,"stop":1755552777207,"duration":577}},{"uid":"f39c8493db69000b","reportUrl":"https://Elv500.github.io/Softsign/92//#testresult/f39c8493db69000b","status":"passed","time":{"start":1755552478295,"stop":1755552479360,"duration":1065}},{"uid":"5306eab1a09ec96b","reportUrl":"https://Elv500.github.io/Softsign/77//#testresult/5306eab1a09ec96b","status":"passed","time":{"start":1755547117017,"stop":1755547117758,"duration":741}},{"uid":"7049cd97a937bda3","reportUrl":"https://Elv500.github.io/Softsign/71//#testresult/7049cd97a937bda3","status":"passed","time":{"start":1755546878327,"stop":1755546879568,"duration":1241}},{"uid":"e89ca16dfe7e134e","reportUrl":"https://Elv500.github.io/Softsign/70//#testresult/e89ca16dfe7e134e","status":"passed","time":{"start":1755546847952,"stop":1755546848696,"duration":744}},{"uid":"65af9ed39113f4e2","reportUrl":"https://Elv500.github.io/Softsign/57//#testresult/65af9ed39113f4e2","status":"passed","time":{"start":1755544250280,"stop":1755544251942,"duration":1662}}]},"tags":["high","functional","smoke"]},"source":"a325cc8ad412e022.json","parameterValues":[]}