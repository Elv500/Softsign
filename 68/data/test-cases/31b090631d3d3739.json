{"uid":"31b090631d3d3739","name":"test_TC363_398_No_permitir_campos_vacios[invalid_payload1-None-422]","fullName":"tests.configuration.tax_categories.test_HU29_KG_PUT_TaxCategory#test_TC363_398_No_permitir_campos_vacios","historyId":"186324c7c5f92d13cdc69a4fac09471a","time":{"start":1755546223288,"stop":1755546224036,"duration":748},"status":"skipped","statusMessage":"XFAIL known issue La app permite espacios vacios y campos invalidos BUG\n\nAssertionError: Esperado status 422, obtenido 200\nassert 200 == 422\n +  where 200 = <Response [200]>.status_code","statusTrace":"setup_edit_tax_category = ({'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NTU1NDYxOTAsImV4cCI6MTc1NTU0OTc5MCwicm9sZX...xts/TaxCategory', '@id': '/api/v2/admin/tax-categories/TAX-f5bd55', '@type': 'TaxCategory', 'code': 'TAX-f5bd55', ...})\ninvalid_payload = {'name': '   '}, expected_error = None, expected_status = 422\n\n    @pytest.mark.high\n    @pytest.mark.negative\n    @pytest.mark.functional\n    @pytest.mark.xfail(reason=\"known issue La app permite espacios vacios y campos invalidos BUG\", run=True)\n    @pytest.mark.parametrize(\"invalid_payload,expected_error,expected_status\", [\n        ({\"name\": \"\"}, \"Please enter tax category name.\", 422),\n        ({\"name\": \"   \"}, None, 422), #en este caso deberia de fallar pero manda como bien con 200\n        ({\"name\": None}, \"The type of the \\\"name\\\" attribute must be \\\"string\\\"\", 400),\n        ({\"name\": \"Válido\", \"description\": \"\"}, None, 200),\n        ({\"name\": \"+\"}, \"solo dato invalido.\", 400) #no ingresar con semantica incorrecta\n    ])\n    def test_TC363_398_No_permitir_campos_vacios(setup_edit_tax_category, invalid_payload, expected_error, expected_status):\n        headers, tax_category_data = setup_edit_tax_category\n        url = EndpointTaxCategory.code(tax_category_data[\"code\"])\n        initial_response = SyliusRequest.get(url, headers)\n        initial_data = initial_response.json()\n        log_request_response(url, initial_response, headers)\n        response = SyliusRequest.put(url, headers, invalid_payload)\n        log_request_response(url, response, headers, invalid_payload)\n>       assert response.status_code == expected_status, f\"Esperado status {expected_status}, obtenido {response.status_code}\"\nE       AssertionError: Esperado status 422, obtenido 200\nE       assert 200 == 422\nE        +  where 200 = <Response [200]>.status_code\n\ntests/configuration/tax_categories/test_HU29_KG_PUT_TaxCategory.py:79: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1755546189956,"stop":1755546189957,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"auth_headers","time":{"start":1755546189957,"stop":1755546190560,"duration":603},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_edit_tax_category","time":{"start":1755546222875,"stop":1755546223287,"duration":412},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL known issue La app permite espacios vacios y campos invalidos BUG\n\nAssertionError: Esperado status 422, obtenido 200\nassert 200 == 422\n +  where 200 = <Response [200]>.status_code","statusTrace":"setup_edit_tax_category = ({'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NTU1NDYxOTAsImV4cCI6MTc1NTU0OTc5MCwicm9sZX...xts/TaxCategory', '@id': '/api/v2/admin/tax-categories/TAX-f5bd55', '@type': 'TaxCategory', 'code': 'TAX-f5bd55', ...})\ninvalid_payload = {'name': '   '}, expected_error = None, expected_status = 422\n\n    @pytest.mark.high\n    @pytest.mark.negative\n    @pytest.mark.functional\n    @pytest.mark.xfail(reason=\"known issue La app permite espacios vacios y campos invalidos BUG\", run=True)\n    @pytest.mark.parametrize(\"invalid_payload,expected_error,expected_status\", [\n        ({\"name\": \"\"}, \"Please enter tax category name.\", 422),\n        ({\"name\": \"   \"}, None, 422), #en este caso deberia de fallar pero manda como bien con 200\n        ({\"name\": None}, \"The type of the \\\"name\\\" attribute must be \\\"string\\\"\", 400),\n        ({\"name\": \"Válido\", \"description\": \"\"}, None, 200),\n        ({\"name\": \"+\"}, \"solo dato invalido.\", 400) #no ingresar con semantica incorrecta\n    ])\n    def test_TC363_398_No_permitir_campos_vacios(setup_edit_tax_category, invalid_payload, expected_error, expected_status):\n        headers, tax_category_data = setup_edit_tax_category\n        url = EndpointTaxCategory.code(tax_category_data[\"code\"])\n        initial_response = SyliusRequest.get(url, headers)\n        initial_data = initial_response.json()\n        log_request_response(url, initial_response, headers)\n        response = SyliusRequest.put(url, headers, invalid_payload)\n        log_request_response(url, response, headers, invalid_payload)\n>       assert response.status_code == expected_status, f\"Esperado status {expected_status}, obtenido {response.status_code}\"\nE       AssertionError: Esperado status 422, obtenido 200\nE       assert 200 == 422\nE        +  where 200 = <Response [200]>.status_code\n\ntests/configuration/tax_categories/test_HU29_KG_PUT_TaxCategory.py:79: AssertionError","steps":[],"attachments":[{"uid":"548366fc8339da24","name":"log","source":"548366fc8339da24.txt","type":"text/plain","size":3975}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"setup_edit_tax_category::0","time":{"start":1755546224044,"stop":1755546224397,"duration":353},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"functional"},{"name":"tag","value":"negative"},{"name":"tag","value":"high"},{"name":"parentSuite","value":"tests.configuration.tax_categories"},{"name":"suite","value":"test_HU29_KG_PUT_TaxCategory"},{"name":"host","value":"pkrvmubgrv54qmi"},{"name":"thread","value":"2363-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.configuration.tax_categories.test_HU29_KG_PUT_TaxCategory"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_error","value":"None"},{"name":"expected_status","value":"422"},{"name":"invalid_payload","value":"{'name': '   '}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":2,"passed":0,"unknown":0,"total":2},"items":[{"uid":"e140d067904c3e7d","reportUrl":"https://Elv500.github.io/Softsign/57//#testresult/e140d067904c3e7d","status":"skipped","statusDetails":"XFAIL known issue La app permite espacios vacios y campos invalidos BUG\n\nAssertionError: Esperado status 422, obtenido 200\nassert 200 == 422\n +  where 200 = <Response [200]>.status_code","time":{"start":1755544334540,"stop":1755544335704,"duration":1164}}]},"tags":["functional","negative","high"]},"source":"31b090631d3d3739.json","parameterValues":["None","422","{'name': '   '}"]}